public class EightOfTwo {
	
	/*
	 * Return a pseudo-random number between min and max, inclusive.
	 * @param min minimum value.
	 * @param max maximum value.
	 * @return Integer between min and max, inclusive.
	 */
	public static int randInt(int min, int max) {
		Random random = new Random();
		return random.nextInt(max-min+1)+min;
	}
	
	/*
	 * Return an array that contains different elements using algorithm one.
	 * @param number the length of the required array.
	 * @param the minimum value of the required array.
	 * @param max the maximum value of the required array.
	 * @return an int array that contains different elements.
	 */
	public static int[] randomArrayOne(int number, int min, int max) {
		int[] a = new int[number];
		int index = 0, flag = 0;
		int d, i, j;
		for(i = 0; i < number; i++) {
			d = randInt(min, max);
		    for(j = 0; j < index; j++) {
		    	flag = 0;
		    	if(d == a[j]) {
		    		flag++;
		    		break;
		    	}	
		    }
		    if(flag == 0) {
		    	a[index] = d;
		    	index++;
		    }else
		    	i--;
		    	continue;
		}
		return a;
	}
	
	/*
	 *Return an array that contains different elements using algorithm two.
	 * @param number the length of the required array.
	 * @param the minimum value of the required array.
	 * @param the maximum value of the required array.
	 * @return an int array that contains different elements.
	 */
	public static int[] randomArrayTwo(int number, int min, int max) {
		int[] a = new int[number];
		boolean[] used = new boolean[number];
		int i, d;
		int index = 0;
		for(i = 0; i < number; i++) {
			d = randInt(min, max);
			if(used[index] != true) {
				a[index] = d;
				used[index] = true;
				index++;
			}else
				i--;
				continue;
		}
		return a;
	}
	
	/*
	 * Return an array that contains different elements using algorithm three
	 * @param number the length of the required array.
	 * @param the minimum value of the required array.
	 * @param the maximum value of the required array.
	 * @return an int array that contains different elements.
	 */
	public static int[] randomArrayThree(int number, int min, int max) {
		int[] a = new int[number];
		int index = 0, i=1;
		while(index < number)
			a[index++] = i++;
		for(i = 0; i < number; i++) {
			swapReferences(a, i, randInt(0, number-1));
		}
		return a;
		
	}
	
	/*
	 * Swap the items between position index1 and index2.
	 * @param arr array to swap.
	 * @param index1, index2 positions to swap.
	 */
	private static void swapReferences(int arr[], int index1, int index2) {
		int temp = arr[index1];
		arr[index1] = arr[index2];
		arr[index2] = temp;
	}
	
	/*
	 * Use CallBack function to test functional time.
	 * @param back CallBack interface.
	 */
	public void testTimes(CallBack back) {
		long begin = System.nanoTime();
		back.excute();
		long end = System.nanoTime();
		System.out.println(end - begin);
	}

	public static void main(String[] args) {
		EightOfTwo test = new EightOfTwo();
		
		test.testTimes(new CallBack() {

			public void excute() {
				int[] arr = randomArrayOne(80, 20, 100);
				for(int a : arr)
					System.out.print(a + " ");
			}
			
		});

	}

}
